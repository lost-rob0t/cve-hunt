(in-package :sento-user)
;; (defclass nvd-client ()
;;   ((headers :accessor nvd-client-headers)))

;; (defun make-nvd-client (token)
;;   (let ((client (make-instance 'nvd-client)))
;;     (setf (nvd-client-headers client) (list `()))))

;; (defun nvd-get-new-cves (start-time end-time)
;;   (jsown:parse (dex:get
;;                 (format nil "https://services.nvd.nist.gov/rest/json/cves/2.0/?noRejected&pubStartDate=~A&pubEndDate=~A&resultsPerPage=2000"
;;                         start-time end-time))))

;; (defun nvd-get-updated-cves (start-time end-time)
;;   (jsown:parse (dex:get
;;                 (format nil "https://services.nvd.nist.gov/rest/json/cves/2.0/?noRejected&lastModStartDate=~A&lastModEndDate=~A&resultsPerPage=2000"
;;                         start-time end-time))))
;; * TODO Make the system configurable?

(defvar *cve-repo* (uiop:merge-pathnames* "cvelistV5/" (uiop:getcwd))
  "The path to the cvelist recent_activities.json as it holds the change data used to write to the database.")


(defvar *sync-file* (uiop:merge-pathnames* "deltaLog.json *cve-repo*")
  "The path to the cvelist recent_activities.json as it holds the change data used to write to the database.")


(defvar *time-file* (uiop:merge-pathnames* ".timecheck" (uiop:getcwd)))


(defvar *time-agent* nil)


;; HACK is this thread safe??

(defvar *on-new-cve-hook* (make-instance 'nhooks:hook))

(defvar *on-updated-cve-hook* (make-instance 'nhooks:hook))





(defun* (unix-now -> integer) ()
  (local-time:timestamp-to-unix (local-time:now)))

(defun* (timestring-to-unix -> integer) ((timestamp string))
  (local-time:timestamp-to-unix (local-time:parse-timestring timestamp)))

;; Reads from time-file, which holds the last timestamp for which a check has been done
(defun init-time-agent ()
  (let ((time (if (uiop:file-exists-p *time-file*)
                  (parse-integer (uiop:read-file-string *time-file*))
                  (unix-now))))
                  

    (setf *time-agent* (make-agent (lambda ()
                                     time)))))


(defun update-last-time ()
  (agent-update *time-agent* (lambda (thing)
                               (declare (ignore thing))
                               (unix-now))))




(defun* (get-last-time -> integer) () (agent-get *time-agent* #'identity))

;; TODO Re do this with defstar
(defun save-last-time (time filepath)
  (with-open-file (stream filepath
                           :direction :output
                           :if-exists :supersede
                           :if-does-not-exist :create)
    (format stream "~a" time)))

(defun update-last-time* ()
  (update-last-time)
  (save-last-time (get-last-time) *time-file*))


;; * NOTE the old activities.json isnt being updated
;; (defun get-updates (jdata)
;;   (loop for cve in (jsown:val (jsown:val jdata "delta") "updated")
;;         collect (jsown:val cve "cveId")))

;; (defun get-new (jdata)
;;   (loop for cve in (jsown:val (jsown:val jdata "delta") "new")
;;         collect (jsown:val cve "cveId")))




(defun get-updates (jdata)
  (loop for cve in (jsown:val jdata "updated")
        collect (jsown:val cve "cveId")))

(defun get-new (jdata)
  (loop for cve in (jsown:val jdata "new")
        collect (jsown:val cve "cveId")))

(defun fixup-cve* (cve)
            (fixup-cve (find-cve cve *cve-repo*)))





(defun* is-newer-p ((time integer))
  (> time (get-last-time)))

(defun* is-older-p ((time integer))
  (< time (get-last-time)))


(defvar *updater*
  (actor-of
                           *system*
                           :name "cve-updater"
                           :receive
                           (lambda (msg)

                             (let ((jdata (jsown:parse (uiop:read-file-string *sync-file*))))
                               (loop for obj in jdata
                                     while (> (timestring-to-unix (jsown:val obj "fetchTime")) (get-last-time))
                                     do (progn
                                          (loop for cve in (get-updates obj)
                                                do (let ((jdata (fixup-cve* cve)))
                                                     (nhooks:run-hook *on-updated-cve-hook* jdata)
                                                     (! *upsert-document* jdata)))

                                          (loop for cve in (get-new obj)
                                                do (let ((jdata (fixup-cve* cve)))
                                                     (nhooks:run-hook *on-new-cve-hook* jdata)
                                                     (! *insert-document* jdata))))))

                             (update-last-time*))))


(defvar *git-pull* (actor-of *system*
                             :name "git-puller"
                             :receive
                             (lambda (msg)
                               (uiop:run-program (format nil "git -C ~a pull" *cve-repo*))
                               (! *updater* t)))
  "Actor to run git pull and kick off the delta updater.")





(defun start-runner (sleep-time)
  (bt:make-thread
   (lambda ()
     (loop
       do (progn
            (! *git-pull* t)
            (sleep sleep-time))))))
