#+title: Readme


* CVE HUNT
Cve hunt is a cve searcher and alert tool

** Install
*** Install SBCL
Cve hunt is written in common lisp, and uses threads with a puesdo actor system, so i cant create a executable just yet....

**** nixOS
Add sbcl to your config
#+begin_src nix
environment.systemPackages = with pkgs; [
    sbcl
    git
]
#+end_src
Now also you might need to create a override to include openssl, if not use the flake in this repo for  a devshell.
**** Debian
#+begin_src shell
apt install sbcl
#+end_src
**** Fedora
#+begin_src shell
dnf install sbcl
#+end_src
**** Arch
#+begin_src shell
pacman -S sbcl
#+end_src
**** Raspberry Pi
SBCL Only Supports arm64, so make sure you are 64bit, or it will fail!.
#+begin_src shell
git clone https://github.com/lost-rob0t/cve-hunt.git
cd cve-hunt
bash install/raspbian.sh
#+end_src

If you get any quicklisp errors open a issue

*** Install quicklisp
Follow these [[https://www.quicklisp.org/beta/#installation][instructions]].
*** Install cl-couch and lisp deps
Installing  a package in lisp is easy as putting a project into the quicklisp local projects dir.
#+begin_src shell
cd ~/quicklisp/local-projects
git clone https://github.com/lost-rob0t/cl-couch.git
git clone https://github.com/atlas-engineer/nhooks.git
#+end_src



** Config
The config is done as an init file, which is a lisp program that runs
Here is an example config
#+begin_src lisp
(format t "Starting config!~%")
(setq +db-user+ "admin")
(setq +db-password+ "password")
(setq +db-host+ "127.0.0.1")
(setq *cve-repo* "<path to https://github.com/hkong2/cvelistV5/>")

;; Set logging level to warning only
(log:config '(sento) :info)

;; Custom var
(defparameter +webhooks+ '("<webhook url for discord>"))

;; Function to send webhooks to a discord channell
(defun send-webhooks (cve msg)
  (loop for webhook in +webhooks+
        do (progn
             (dex:post webhook :content (jsown:to-json (jsown:new-js ("username" "CVE HUNT") ("content" msg)) ) :headers '(("Content-Type" . "Application/json"))))
        do (format t (jsown:to-json (jsown:new-js ("username" "CVE HUNT") ("content" msg))))))

;; Add a hook to when a new cve is loaded
(nhooks:add-hook *on-new-cve-hook* #'(lambda (cve)
                                       (when (state-published-p cve)
                                         (send-webhooks cve (format nil "New CVE: ~a  ***~a*** ~%Description: ~a~%Links: ~a ~%Date: ~a" (jsown:val cve "_id") (walk-json-safe cve '("containers" "cna" "title") "Title NA") (first (mapcar (lambda (data) (jsown:val-safe data "value") ) (walk-json cve '("containers" "cna" "descriptions")))) (format nil "~{+ ~A~^~% ~}" (mapcar (lambda (data) (jsown:val data "url")) (walk-json cve '("containers" "cna" "references"))))

                                                                    (jsown:val cve "date-created"))))))


;; Add a hook to when a new cve is updated
(nhooks:add-hook *on-updated-cve-hook* #'(lambda (cve)
                                           (when (state-published-p cve)
                                             (send-webhooks cve (format nil "Updated CVE: ~a  ***~a*** ~%Description: ~a~%Links: ~a ~%Date: ~a" (jsown:val cve "_id") (walk-json-safe cve '("containers" "cna" "title") "Title NA") (first (mapcar (lambda (data) (jsown:val-safe data "value") ) (walk-json cve '("containers" "cna" "descriptions")))) (format nil "~{+ ~A~^~% ~}" (mapcar (lambda (data) (jsown:val data "url")) (walk-json cve '("containers" "cna" "references"))))

                                                                        (jsown:val cve "date-updated"))))))

#+end_src
