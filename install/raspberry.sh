#!/usr/bin/env sh

cwd=$PWD
project_dir="$cwd/.."
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RESET='\033[0m' # Reset color
COUCH_VERSION="3.2.3"
CVE_REPO="https://github.com/hkong2/cvelistV5.git"
function log-command () {
    local cmd="$1"
    local timestamp=$(date +"%Y-%m-%d %T")

    echo -e "${YELLOW}[$timestamp] ${GREEN}running: $cmd ${RESET}" | tee -a "$cwd/install.log"
    eval "$cmd"
}

function confirm_install() {
    read -p "Please review the source code before installing. Do you want to continue (yes/no)? " choice
    case "$choice" in
        yes|Yes|YES)
            echo "Continuing with the installation..."
            cat "$0" | less
            ;;
        no|No|NO)
            echo "As a security person, you should always check anything you run."
            exit 1
            ;;
        *)
            echo "Invalid choice. Please enter 'yes' or 'no'."
            confirm_review_install
            ;;
    esac
}

function confirm_arch() {
    read -p "Are you installing on 32bit OS? SBCL does not support 32Bit threading. (yes/no)? " choice
    case "$choice" in
        yes|Yes|YES)
            echo "Continuing with the installation..."
            ;;
        no|No|NO)
            echo "I am Sorry for the trouble..."
            exit 1
            ;;
        *)
            echo "Invalid choice. Please enter 'yes' or 'no'."
            confirm_arch
            ;;
    esac
}

if [[ ! $(id -u) -eq 0 ]]; then
  echo -e "${RED}You need to be root to run the installer.${RESET}"
  exit 1
fi

confirm_install
confirm_arch

log-command "apt install sbcl git -y"
project_dir=$(git rev-parse --show-toplevel)


#### cve-hunt user setup
log-command "useradd -d /home/cve cve"
log-command "mkdir /home/cve"
log-command "mkdir /var/lib/cve-hunt"
log-command "cd /home/cve"
log-comamnd "'curl -O https://beta.quicklisp.org/quicklisp.lisp'"
log-command "export $HOME=/home/cve"
log-command "sbcl --load quicklisp.lisp --eval '(quicklisp-quickstart:install)'"
log-command "cp -rv $project_dir /home/cve/quicklisp/local-projects"
log-command "cp -rv $project_dir/init.lisp /var/lib/cve-hunt/init.lisp"

log-command "git clone https://github.com/lost-rob0t/cl-couch.git /home/cve/quicklisp/local-projects/cl-couch"
log-command "chown -R cve:cve /home/cve"
log-command "chown -R cve:cve /var/lib/cve-hunt"

log-command "git clone $CVE_REPO /var/lib/cve-hunt/cvelistV5"

### CVE hunt systemd service setup

echo "[Unit]
Description=This unit will start after internet connection
After=network.target
Wants=network-online.target

[Service]
Restart=always
Type=simple
ExecStart=/usr/bin/sbcl --eval '(ql:quickload :cve-hunt)'
WorkingDirectory=/var/lib/cve-hunt

[Install]
WantedBy=multi-user.target" > /lib/systemd/system/cvehunt.service

#### CouchDB setup
log-command "wget http://packages.erlang-solutions.com/debian/erlang_solutions.asc"
log-comamnd "apt-key add erlang_solutions.asc"
log-command "apt-get --no-install-recommends -y install build-essential \
pkg-config erlang libicu-dev \
libmozjs185-dev libcurl4-openssl-dev"

log-command "useradd -d /home/couchdb couchdb"
log-command "mkdir /home/couchdb"
log-command "chown couchdb:couchdb /home/couchdb"
log-command "wget https://dlcdn.apache.org/couchdb/source/$COUCH_VERSION/apache-couchdb-$COUCH_VERSION.tar.gz"
log-command "tar zxvf apache-couchdb-$COUCH_VERSION"
log-comamnd "cd apache-couchdb-$COUCH_VERSION/"
log-comamnd "./configure"
log-comamnd "make release"
log-command "cp -Rp ./rel/* /home/couchdb"
read -p "Enter Admin Username: " admin_user
read -p "Enter Admin Password: " admin_password
echo "; CouchDB Configuration Settings

; Custom settings should be made in this file. They will override settings
; in default.ini, but unlike changes made to default.ini, this file won't be
; overwritten on server upgrade.

[couchdb]
;max_document_size = 4294967296 ; bytes

[httpd]
;port = 5984
;bind_address = 127.0.0.1
; Options for the MochiWeb HTTP server.
;server_options = [{backlog, 128}, {acceptor_pool_size, 16}]
; For more socket options, consult Erlang's module 'inet' man page.
;socket_options = [{recbuf, 262144}, {sndbuf, 262144}, {nodelay, true}]

; Uncomment next line to trigger basic-auth popup on unauthorized requests.
;WWW-Authenticate = Basic realm="administrator"

; Uncomment next line to set the configuration modification whitelist. Only
; whitelisted values may be changed via the /_config URLs. To allow the admin
; to change this value over HTTP, remember to include {httpd,config_whitelist}
; itself. Excluding it from the list would require editing this file to update
; the whitelist.
;config_whitelist = [{httpd,config_whitelist}, {log,level}, {etc,etc}]

[httpd_global_handlers]
;_google = {couch_httpd_proxy, handle_proxy_req, <<"http://www.google.com">>}

[couch_httpd_auth]
; If you set this to true, you should also uncomment the WWW-Authenticate line
; above. If you don't configure a WWW-Authenticate header, CouchDB will send
; Basic realm="server" in order to prevent you getting logged out.
; require_valid_user = false

[log]
;level = debug

[log_level_by_module]
; In this section you can specify any of the four log levels 'none', 'info',
; 'error' or 'debug' on a per-module basis. See src/*/*.erl for various
; modules.
;couch_httpd = error


[os_daemons]
; For any commands listed here, CouchDB will attempt to ensure that
; the process remains alive. Daemons should monitor their environment
; to know when to exit. This can most easily be accomplished by exiting
; when stdin is closed.
;foo = /path/to/command -with args

[daemons]
; enable SSL support by uncommenting the following line and supply the PEM's below.
; the default ssl port CouchDB listens on is 6984
; httpsd = {couch_httpd, start_link, [https]}

[ssl]
;cert_file = /full/path/to/server_cert.pem
;key_file = /full/path/to/server_key.pem
;password = somepassword
; set to true to validate peer certificates
verify_ssl_certificates = false
; Path to file containing PEM encoded CA certificates (trusted
; certificates used for verifying a peer certificate). May be omitted if
; you do not want to verify the peer.
;cacert_file = /full/path/to/cacertf
; The verification fun (optional) if not specified, the default
; verification fun will be used.
;verify_fun = {Module, VerifyFun}
; maximum peer certificate depth
ssl_certificate_max_depth = 1

; To enable Virtual Hosts in CouchDB, add a vhost = path directive. All requests to
; the Virual Host will be redirected to the path. In the example below all requests
; to http://example.com/ are redirected to /database.
; If you run CouchDB on a specific port, include the port number in the vhost:
; example.com:5984 = /database
[vhosts]
;example.com = /database/

[update_notification]
;unique notifier name=/full/path/to/exe -with "cmd line arg"

; To create an admin account uncomment the '[admins]' section below and add a
; line in the format 'username = password'. When you next start CouchDB, it
; will change the password to a hash (so that your passwords don't linger
; around in plain-text files). You can add more admin accounts with more
; 'username = password' lines. Don't forget to restart CouchDB after
; changing this.
[admins]
$admin_user = $admin_password" > /home/couchdb/etc/local.ini


log-command "chown -R couchdb:couchdb /home/couchdb"
log-command "cd $cwd"
echo "[Unit]
Description=CouchDB Service
After=network.target

[Service]
Type=idle
User=couchdb
Restart=always
ExecStart=/home/couchdb/bin/couchdb

[Install]
WantedBy=default.target" > /lib/systemd/system/couchdb.service
log-command "chmod 644 /lib/systemd/system/couchdb.service"
log-command "systemctl daemon-reload"
log-command "systemctl daemon-reload"
log-command "systemctl enable couchdb.service --now"
echo -e "${GREEN} Everything Should be installed! edit the couchdb config at /home/couchdb/etc/local.ini if you need to."
echo -e "cve hunt config: /var/lib/cve-hunt/init.lisp"
