#!/usr/bin/env sh
# TODO Create Uninstall script for cleanup
cwd=$PWD

project_dir=$(git rev-parse --show-toplevel)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RESET='\033[0m' # Reset color
COUCH_VERSION="3.2.3"
CVE_REPO="https://github.com/hkong2/cvelistV5.git"
function log-command () {
    local cmd="$1"
    local timestamp=$(date +"%Y-%m-%d %T")

    echo -e "${YELLOW}[$timestamp] ${GREEN}running: $cmd ${RESET}" | tee -a "$cwd/install.log"
    eval "$cmd"
}
# TODO Fix this
function confirm_install() {
    read -p "Please review the source code before installing. Do you want to continue (yes/no)? " choice
    case "$choice" in
        yes|Yes|YES)
            echo "Continuing with the installation..."
            cat "$0" | less
            ;;
        no|No|NO)
            echo "As a security person, you should always check anything you run."
            exit 1
            ;;
        *)
            echo "Invalid choice. Please enter 'yes' or 'no'."
            confirm_review_install
            ;;
    esac
}

function confirm_arch() {
    read -p "Are you installing on 64bit OS? SBCL does not support 32Bit threading. (yes/no)? " choice
    case "$choice" in
        yes|Yes|YES)
            echo "Continuing with the installation..."
            ;;
        no|No|NO)
            echo "I am Sorry for the trouble..."
            exit 1
            ;;
        *)
            echo "Invalid choice. Please enter 'yes' or 'no'."
            confirm_arch
            ;;
    esac
}

if [[ ! $(id -u) -eq 0 ]]; then
  echo -e "${RED}You need to be root to run the installer.${RESET}"
  exit 1
fi

function install () {
confirm_install
confirm_arch

log-command "apt install sbcl git -y"


#### cve-hunt user setup
log-command "useradd -d /home/cve cve"
log-command "mkdir /home/cve"
log-command "mkdir /var/lib/cve-hunt"
log-command "cd /home/cve"
log-command "wget https://beta.quicklisp.org/quicklisp.lisp"
log-command "export HOME=/home/cve"
log-command "sbcl --load quicklisp.lisp --eval '(quicklisp-quickstart:install)'"
log-command "git clone https://github.com/atlas-engineer/nhooks.git /home/cve/quicklisp/local-projects/nhooks"
log-command "git clone https://github.com/lost-rob0t/cl-couch.git /home/cve/quicklisp/local-projects/cl-couch"
log-command "cp -rv $project_dir /home/cve/quicklisp/local-projects"
log-command "cp -rv $project_dir/init.lisp /var/lib/cve-hunt/init.lisp"
log-command "git clone $CVE_REPO /var/lib/cve-hunt/cvelistV5"
log-command "chown -R cve:cve /home/cve"
log-command "chown -R cve:cve /var/lib/cve-hunt"


### CVE hunt systemd service setup

echo "[Unit]
Description=Cve hunt
After=network.target
Wants=network-online.target

[Service]
Restart=always
Type=simple
ExecStart=/usr/bin/sbcl --eval '(ql:quickload :cve-hunt)'
WorkingDirectory=/var/lib/cve-hunt

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/cvehunt.service



#### CouchDB setup
log-command "apt update && apt upgrade -y"
echo -e "${RED}Curling into bash SPOOOKYYYYYY${RESET}"
log-command "curl -sSL https://get.docker.com | sh"
echo "FROM couchdb:latest
# This is to set a default password and
# Set maintainer information
MAINTAINER nsaspy <nsaspy@airmail.cc>

# Set environment variables for CouchDB
ENV COUCHDB_USER admin
ENV COUCHDB_PASSWORD password
" > Dockerfile
log-command "docker build . -t couchdb"
log-command "mkdir -p /var/lib/couchdb"
echo "[Unit]
Description=CouchDB Service
After=docker.service
Requires=docker.service

[Service]
TimeoutStartSec=0
Restart=always
ExecStartPre=-/usr/bin/docker exec %n stop
ExecStartPre=-/usr/bin/docker rm %n
ExecStart=/usr/bin/docker run --rm --name %n \
    -v /var/lib/couchdb:/opt/couchdb/data \
    -p 5984:5984 \
    couchdb:latest
[Install]
WantedBy=default.target" > /etc/systemd/system/couchdb.service
log-command "systemctl daemon-reload"
log-command "systemctl daemon-reload"
log-command "systemctl enable couchdb.service --now"
log-command "systemctl enable cvehunt.service --now"
echo -e "${GREEN} Everything Should be installed! edit the couchdb config at /home/couchdb/etc/local.ini if you need to."
echo -e "cve hunt config: /var/lib/cve-hunt/init.lisp"
}

function update () {
    echo -e "${YELLOW} Starting updates....${RESET}"
    log-command "git -C "$project_dir" pull"
    log-command "cp -rv $project_dir /home/cve/quicklisp/local-projects"
    log-command "cp -rv $project_dir/init.lisp /var/lib/cve-hunt/init.lisp"
    echo -e "${GREEN} Everything Should be updated!${RESET}"
}


if [ $# -eq 0 ]; then
  echo -e "${RED}Usage: $0 [install|update]${RESET}"
  exit 1
fi
case "$1" in
  "install")
    log-command "install"
    # Add additional installation commands as needed
    ;;
  "update")
    log-command "update"
    # Add additional update commands as needed
    ;;
  *)
    echo -e "${RED}Invalid argument. Usage: $0 [install|update]${RESET}"
    exit 1
    ;;
esac
